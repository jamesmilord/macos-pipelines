name: DEPLOYMENT

on:
  repository_dispatch:
    types: ["cajun", "flavors"]
    inputs:
      parent_event:
        description: 'Parent event'
        required: true
      branch:
        description: 'branch to deploy'
        required: true
      app_identifier:
        description: 'App Identifier'
        required: true
      pull_request_number:
        description: 'Pull request number'
        required: false
      pull_request_url:
        description: 'Pull request URL'
        required: false
      flavor:
        description: 'App Enviroment'
        type: string
        default: 'none'
        required: false

concurrency:
  group: ${{ github.event.client_payload.branch }}

jobs:
 deploy_ios:
    name: Deploy build to TestFlight
    runs-on: macOS-latest
    steps:
      - name: Checkout Cajun code
        if: ${{ github.event.action == 'cajun' }}
        uses: actions/checkout@v4
        with:
          repository: jamesmilord/cajun
          ref: ${{ github.event.client_payload.branch }}
          ssh-key: ${{ secrets.CAJUN_DEPLOY_KEY }}

      - name: Checkout Flavors code
        if: ${{ github.event.action == 'flavors' }}
        uses: actions/checkout@v4
        with:
          repository: jamesmilord/flavors
          ref: ${{ github.event.client_payload.branch }}
          ssh-key: ${{ secrets.FLAVORS_DEPLOY_KEY }}

      - name: log 
        run: |
          echo "GitHub Event Payload: ${{ toJson(github) }}"

      - name: Get Change log
        run: |
          if [ "${{ github.event.client_payload.parent_event }}" == "pull_request" ]; then
            # retrieve from PR description

            # Get the PR description using GitHub API
            PR_DESCRIPTION=$(curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GIT_AUTHORIZATION }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/jamesmilord/${{ github.event.action }}/pulls/${{ github.event.client_payload.pull_request_number }}" \
              | jq -r '.body')

            echo "PR_DESCRIPTION: $PR_DESCRIPTION"

            WHATS_NEW=$(echo "$PR_DESCRIPTION" | grep -A999999 '### What is new' | sed -n '/### What is new/,$p' | sed '/###/d' | sed '/^[[:space:]]*-[[:space:]]*\[[ x]\]/!d; s/^[[:space:]]*-[[:space:]]*\[[ x]\]//')

          else
            # retrieve from latest Release description

            # Get the Release description using GitHub API
            RELEASE_DESCRIPTION=$(curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GIT_AUTHORIZATION }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/jamesmilord/${{ github.event.action }}/releases/latest\
              | jq -r '.body')

            echo "this here $RELEASE_DESCRIPTION"

            WHATS_NEW=$(echo "$RELEASE_DESCRIPTION" | sed -e '/^### Features$/d' -e 's/\[[^]]*\]([^)]*)//g' -e 's/()//g')

          fi

           # # Set the extracted content in an environment variable with "\n" separator

          echo "WHATS_NEW<<EOF" >> $GITHUB_ENV
          echo "$WHATS_NEW" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display WHATS_NEW Content
        run: |
          echo "Extracted 'What is new': ${{ env.WHATS_NEW }}"

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.MATCH_REPO_KEY }}

      - name: Run Flutter tasks
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.4'
      - run: flutter clean
      - run: flutter pub get
      - run: |
          if [ "${{ github.event.client_payload.flavor }}" == "none" ]; then
            flutter build ios --release --no-codesign --no-tree-shake-icons
          else
            flutter build ios --flavor ${{ github.event.client_payload.flavor }} --release --no-codesign --no-tree-shake-icons -t lib/main_${{ github.event.client_payload.flavor }}
          fi

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true
          working-directory: 'ios'

      - name: Set Pull request URL, Pull request branch name
        run: |
          if [ "${{ github.event.client_payload.parent_event }}" == "pull_request" ]; then
            PULL_REQUEST_URL="${{ github.event.client_payload.pull_request_url }}"
            PULL_REQUEST_BRANCH_NAME="${{ github.event.client_payload.branch }}"
          else
            PULL_REQUEST_URL="none"
            PULL_REQUEST_BRANCH_NAME="none"
          fi
          echo "PULL_REQUEST_URL=$PULL_REQUEST_URL" >> $GITHUB_ENV
          echo "PULL_REQUEST_BRANCH_NAME=$PULL_REQUEST_BRANCH_NAME" >> $GITHUB_ENV

      - name: Display App version, Pull request URL, Pull request branch name
        run: |
          echo "Extracted 'Pull request url': ${{ env.PULL_REQUEST_URL }}"
          echo "Extracted 'Pull request branch name': ${{ env.PULL_REQUEST_BRANCH_NAME }}"

      - name: List xcschemes directory before
        run: |
          ls ios/Runner.xcodeproj/xcshareddata/xcschemes

      - name: Remove Unnecessary scheme to prevent Multiple schemes found
        if: ${{ github.event.client_payload.flavor != 'none' }}
        run: | 
          if [ "${{ github.event.client_payload.flavor }}" == "staging" ]; then
            echo "removing prod scheme"
            rm -f ios/Runner.xcodeproj/xcshareddata/xcschemes/production.xcscheme
          else
            echo "removing staging scheme"
            rm -f ios/Runner.xcodeproj/xcshareddata/xcschemes/staging.xcscheme
          fi


      - name: List xcschemes directory after
        run: |
          ls ios/Runner.xcodeproj/xcshareddata/xcschemes


      - name: Deploy iOS Beta to TestFlight via Fastlane
        uses: maierj/fastlane-action@v3.0.0
        with:
          lane: beta
          subdirectory: ios
        env:
          TEMP_KEYCHAIN_USER: ${{ secrets.TEMP_KEYCHAIN_USER }}
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APP_IDENTIFIER: ${{ github.event.client_payload.app_identifier }}
          GIT_AUTHORIZATION: ${{ secrets.GIT_AUTHORIZATION }}
          APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
          DEV_PORTAL_TEAM_ID: ${{ secrets.DEV_PORTAL_TEAM_ID }}
          GIT_CERTS_URL: ${{ secrets.GIT_CERTS_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          PULL_REQUEST_URL: ${{ env.PULL_REQUEST_URL }}
          PULL_REQUEST_BRANCH_NAME: ${{ env.PULL_REQUEST_BRANCH_NAME }}
          WHATS_NEW: ${{ env.WHATS_NEW }}
          APP_SCHEME: ${{ github.event.client_payload.flavor }}