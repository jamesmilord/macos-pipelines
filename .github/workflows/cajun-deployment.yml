name: DEPLOYMENT

on:
  repository_dispatch:
    types: ["cajun"]
    inputs:
      version:
        description: 'Application version'
        required: true
      parent_event:
        description: 'Parent event'
        required: true
  push:
    paths:
      - ".github/workflows/cajun-deployment.yml"
    branches:
      - main

jobs:
 deploy_ios:
    name: Deploy build to TestFlight
    runs-on: macOS-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: jamesmilord/cajun
          ref: main
          ssh-key: ${{ secrets.CAJUN_DEPLOY_KEY }}

      - name: Get Change log
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ] && [ "${{ github.event.client_payload.parent_event }}" == "pull_request" ]; then
            # retrieve from PR description

            # Get the PR description using GitHub API
            PR_DESCRIPTION=$(curl -s -H "Authorization: token ${{ secrets.GIT_AUTHORIZATION }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.actor }}/cajun/pulls/${{ github.event.pull_request.number }}" \
              | jq -r '.body')

            WHATS_NEW=$(echo "$PR_DESCRIPTION" | grep -A999999 '### What is new' | sed -n '/### What is new/,$p' | sed '/###/d' | sed '/^[[:space:]]*-[[:space:]]*\[[ x]\]/!d; s/^[[:space:]]*-[[:space:]]*\[[ x]\]//')

          else
            echo "holla"
            # retrieve from latest Release description

            CODE=(curl -s --write-out '%{http_code}' \
              --silent \
              --output /dev/null \
              -H 'Accept: application/vnd.github.v3+json}' \
              --url 'https://api.github.com/repos/${{ github.actor }}/cajun/releases/latest')

            echo " code $CODE"

            # Get the Release description using GitHub API
            RELEASE_DESCRIPTION=$(curl -s -H "Authorization: token ${{ secrets.GIT_AUTHORIZATION }}" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/repos/${{ github.actor }}/cajun/releases/latest" \
                                | jq -r '.body')

            echo "this here $RELEASE_DESCRIPTION"

            WHATS_NEW=$(echo "$RELEASE_DESCRIPTION" | sed -e '/^### Features$/d' -e 's/\[[^]]*\]([^)]*)//g' -e 's/()//g')

          fi

           # # Set the extracted content in an environment variable with "\n" separator

          echo "WHATS_NEW<<EOF" >> $GITHUB_ENV
          echo "$WHATS_NEW" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display WHATS_NEW Content
        run: |
          echo "Extracted 'What is new': ${{ env.WHATS_NEW }}"

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.MATCH_REPO_KEY }}

      - name: Run Flutter tasks
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.13.4'
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build ios --release --no-codesign --no-tree-shake-icons

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true
          working-directory: 'ios'

      - name: Set App version
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            APP_VERSION="${{ github.event.client_payload.version }}"
          else
            APP_VERSION="current"
          fi
          echo "APP_VERSION=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Display App version
        run: |
          echo "Extracted 'App version': ${{ env.APP_VERSION }}"

      # - name: Deploy iOS Beta to TestFlight via Fastlane
      #   uses: maierj/fastlane-action@v3.0.0
      #   with:
      #     lane: beta
      #     subdirectory: ios
      #   env:
      #     TEMP_KEYCHAIN_USER: ${{ secrets.TEMP_KEYCHAIN_USER }}
      #     TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
      #     APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      #     APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      #     APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}
      #     GIT_AUTHORIZATION: ${{ secrets.GIT_AUTHORIZATION }}
      #     APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
      #     DEV_PORTAL_TEAM_ID: ${{ secrets.DEV_PORTAL_TEAM_ID }}
      #     GIT_CERTS_URL: ${{ secrets.GIT_CERTS_URL }}
      #     MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      #     MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      #     APP_VERSION: ${{ env.APP_VERSION }}
      #     PULL_REQUEST_URL: ${{ github.event.pull_request.html_url }}
      #     PULL_REQUEST_BRANCH_NAME: ${{ github.head_ref }}
      #     WHATS_NEW: ${{ env.WHATS_NEW }}